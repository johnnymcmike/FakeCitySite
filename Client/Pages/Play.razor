@page "/play"
@using FakeCitySite.Shared
@inject HttpClient http

<MudText Align="Align.Center">
    <h1>Which of these cities is real?</h1>
</MudText>
<div class="mt-12 mx-6">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="6">
            <CityPaper @ref="cityCards[0]" CardClickedCallback="async () => {await CardClicked(0);}">
                
            </CityPaper>
        </MudItem>
        <MudItem xs="6">
            <CityPaper @ref="cityCards[1]" CardClickedCallback="async () => {await CardClicked(1);}">
                
            </CityPaper>
        </MudItem>
        <MudItem xs="4">
            <MudStack Justify="Justify.Center">
                <MudText Align="Align.Center" GutterBottom="true">@winOrLose</MudText>
                <MudButton @onclick="async () => {await ResetCards();}" Variant="Variant.Filled" Disabled="!hasChosen">Next</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="4">
            <MudText>Current streak: @streak</MudText>
            <MudText>Highest streak: @highestStreak</MudText>
        </MudItem>
    </MudGrid>
</div>

@code {
    private City[]? nextCityPair;
    private bool hasChosen;
    private string winOrLose = "Choose to continue";
    private int streak;
    private int highestStreak;
    private int totalWrong;
    private int totalRight;
    private CityPaper[] cityCards = new CityPaper[2];
    private int trueIndex;

    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        await ResetCards();
    }

    private async Task CardClicked(int which)
    {
        hasChosen = true;
        if (cityCards[0].RevealTruth())
        {
            trueIndex = 0;
        }
        if (cityCards[1].RevealTruth())
        {
            trueIndex = 1;
        }
        
        if(trueIndex == which)
        {
            winOrLose = "Correct!";
            streak++;
            totalRight++;
            if(streak > highestStreak)
            {
                highestStreak = streak;
            }
        }
        else
        {
            winOrLose = "Wrong!";
            streak = 0;
            totalWrong++;
        }
        await http.PatchAsync($"api/cities/incrementtimeschosen/{cityCards[which].City.Id}", null);
    }
    
    private async Task ResetCards()
    {
        hasChosen = false;
        winOrLose = "Choose to continue";
        await GetNewCityPair();
        UpdateCityPair();
    }

    private async Task GetNewCityPair()
    {
        var cityArrayFromApi = await http.GetFromJsonAsync<City[]>("api/cities/getpair");
        if (cityArrayFromApi is null || cityArrayFromApi.Length != 2)
        {
            throw new Exception("Could not get city pair");
        }
        nextCityPair = cityArrayFromApi;
        if (random.Next(0, 2) == 0)
        {
            (nextCityPair[0], nextCityPair[1]) = (nextCityPair[1], nextCityPair[0]);
        }
    }
    

    private void UpdateCityPair()
    {
        if (nextCityPair is null) return;
        cityCards[0].City = nextCityPair[0];
        cityCards[1].City = nextCityPair[1];
        
        cityCards[0].BackgroundColor = Color.Inherit.ToString();
        cityCards[1].BackgroundColor = Color.Inherit.ToString();
        nextCityPair = null;
        StateHasChanged();
    }
}