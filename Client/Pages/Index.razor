@page "/"
@using FakeCitySite.Shared
@inject HttpClient http

<MudText Align="Align.Center">
    <h1>Which of these cities is real?</h1>
</MudText>
<div class="mt-12 mx-6">
    <MudGrid Justify="Justify.Center">
        <MudItem sm="6" xs="12">
            <CityPaper @ref="cityCards[0]" CardClickedCallback="async () => { await CardClicked(0); }"> </CityPaper>
        </MudItem>
        <MudItem sm="6" xs="12">
            <CityPaper @ref="cityCards[1]" CardClickedCallback="async () => { await CardClicked(1); }"> </CityPaper>
        </MudItem>
        <MudItem sm="4" xs="6">
            <MudStack Justify="Justify.Center">
                <MudText Align="Align.Center" GutterBottom="true">@winOrLose</MudText>
                <MudButton @onclick="async () => { await ResetCards(); }" Color="Color.Secondary" Variant="Variant.Filled" Disabled="!hasChosen">Next</MudButton>
            </MudStack>
        </MudItem>
        <MudItem sm="2" xs="6">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Align="Align.Center">Current streak: @streak</MudText>
                <MudText Align="Align.Center">Highest streak: @highestStreak</MudText>
            </MudStack>
        </MudItem>
        <MudItem sm="4" xs="12">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Align="Align.Center">Accuracy: @Accuracy%</MudText>
                <MudSwitch @bind-Checked="@showMap" Color="Color.Secondary">Show Map</MudSwitch>
            </MudStack>
        </MudItem>
        <MudItem sm="12">
            @if (showMap)
            {
                <iframe width="600" height="600" style="border:0" allowfullscreen
                        src=@($"https://www.google.com/maps/embed/v1/place?&key=AIzaSyAYxYZ35fDNTRA5cF3rigju_NzcunkXumY&q={mapQueryString}&zoom=7")>
                </iframe>
            }
        </MudItem>
    </MudGrid>
</div>

@code {
    private City[]? nextCityPair;
    private bool hasChosen;
    private string winOrLose = "Choose to continue";
    private int streak;
    private int highestStreak;
    private int totalWrong;
    private int totalRight;
    public bool showMap = true;

    private double Accuracy
    {
        get
        {
            if (totalWrong == 0)
                return 100;
            double result = (double) totalRight / (totalRight + totalWrong) * 100;
            return Math.Round(result, 2);
        }
    }

    private readonly CityPaper[] cityCards = new CityPaper[2];
    private int trueIndex;
    private string mapQueryString = "New York, NY";

    private readonly Random random = new();

    protected override async Task OnInitializedAsync()
    {
        await ResetCards();
    }

    private async Task CardClicked(int which)
    {
        if (hasChosen)
            return;
        if (cityCards[0].RevealTruth())
        {
            trueIndex = 0;
        }
        if (cityCards[1].RevealTruth())
        {
            trueIndex = 1;
        }
        hasChosen = true;

        mapQueryString = cityCards[trueIndex].City.Name;
        if (cityCards[trueIndex].City.Country is not null)
        {
            mapQueryString += ",+" + cityCards[trueIndex].City.Country;
        }

        if (trueIndex == which)
        {
            winOrLose = "Correct!";
            streak++;
            totalRight++;
            if (streak > highestStreak)
            {
                highestStreak = streak;
            }
        }
        else
        {
            winOrLose = "Wrong!";
            streak = 0;
            totalWrong++;
        }
        await http.PatchAsync($"api/cities/incrementtimeschosen/{cityCards[which].City.Id}", null);
    }

    private async Task ResetCards()
    {
        hasChosen = false;
        winOrLose = "Choose to continue";
        await GetNewCityPair();
        UpdateCityPair();
    }

    private async Task GetNewCityPair()
    {
        var cityArrayFromApi = await http.GetFromJsonAsync<City[]>("api/cities/getpair");
        if (cityArrayFromApi is null || cityArrayFromApi.Length != 2)
        {
            throw new Exception("Could not get city pair");
        }
        nextCityPair = cityArrayFromApi;
        if (random.Next(0, 2) == 0)
        {
            (nextCityPair[0], nextCityPair[1]) = (nextCityPair[1], nextCityPair[0]);
        }
    }


    private void UpdateCityPair()
    {
        if (nextCityPair is null) return;
        cityCards[0].City = nextCityPair[0];
        cityCards[1].City = nextCityPair[1];

        cityCards[0].Reset();
        cityCards[1].Reset();

        nextCityPair = null;
        StateHasChanged();
    }

}